SQL CLAUSES 

*** For now, a clause is a sequence of words within a query. 

*** Clauses usually start with an capitalized keyword like SELECT
or FROM. The capitalized keyword is the clause's name. 

- The JOIN clause combines columns from two different tables. 
		Syntax:
			SELECT [tableName.column1], [tableName.column2],... [tableName.columnX]
			FROM [table1] 
			[Join type] [table2] ON [column1] = [column2]
			

- The dot syntax reminds me of selecting a object's property. 

- The INSERT INTO clause adds a new row to a table. 
	Syntax: INSERT INTO [table name] (column1, column2, etc...)
			VALUES ('[value you want for column1]',
					'[value you want for column2]', etc...);
	- You do NOT have to insert a row that has a value every
	column, you can pick and choose which columns you want your 
	row to fill in. If your row does not fill a column, the 
	value in that column will maybe be (NULL) or autogenerated.
	- You do NOT need to put parenthesis around the column names. 
	- Once the row is inserted (added) you can only get rid of 
	it with the DELETE clause. 
	

- The DELETE clause removes a row(s) from a table. To do it, SQL finds a specific
	cell in the table and delete all rows that have that cell. 
	Syntax: DELETE FROM [table name]
			WHERE [A column that intersects with the row you want to delete ] =
			'[intersecting cell of row you want to delete]';
	
	Here you're telling SQL to delete all rows with this cell. 
			
	- Make sure the value you want to delete is in single quotes.
	- You have to use DELETE FROM with WHERE. 
	
- The UPDATE clause changes parts of an existing row(s) in a table.
	Syntax: UPDATE [table name]
			SET [column of the value you want to change] = [value you want to change to], 
			[column of the value you want to change2] = [value you want to change to2],...
			WHERE [condition you use to choose the right row(s)];

*** Clauses do not have to be written all on one line (they 
	can span multiple lines) and are not case-sensitive. 
	
- Almost all queries will follow the 
	SELECT 
	FROM
	WHERE 
	
	template. 
	
- If there WHERE and GROUP BY clauses are both used, group by 
	has to go after where. This should make sense because you 
	have to return elements from SELECT FROM WHERE before you 
	return them. 
	
*** You CANNOT put the count() function into the WHERE clause. 
	If you want use filter your elements with a condition. Use 
	the HAVING clause. 
	
- The difference between the WHERE and HAVING clause is WHERE 
	applies a condition on each element during SELECT FROM WHERE
	while HAVING applies a condition on a set of elements, namely 
	elements returned by SELECT FROM WHERE. 
	
- ORDER BY goes after GROUP BY.

- The ORDER BY cluase allows you to order by one of the expressions
	in the SELECT clause. Without ORDER BY, the query is order by 
	the first column in the table? (Not the query). By default 
	ORDER BY orders from least to greatest. To go from greatest 
	to least (descending), use the keyword "desc" after the column.
		- syntax: ORDER BY [column name] [desc if you want it]
	
- If you order your elements in descending order, the greatest 
	element will be on top. 
	
- When you're ordering elements, you're saying "Order the returned
	elements from SELECT FROM WHERE by this column in ascending or
	descending order."
	
- A query works in this order. 
	1) SQL goes to FROM 
	2) SQL selects columns and functions from SELECT 
	3) WHERE filters each element. 
	4) GROUP BY groups by a column's elements 
	5) Now elements are returned?
	6) Now the HAVING clause filters the elements 
	7) ORDER BY organizes the elements. 

- Yes, SQL most likely returns the elements all at the same time, 
	but it's easier for me to think of the elements getting returned 
	then filtered in steps. The way I think of the query is 
	FROM a table, SELECT columns' elements and filter them with the 
	condition in WHERE, then GROUP the elements by a column. If count() 
	is used regroup the elements. 

	
*** SQL commands are divided into two main catagories: Data
	Manipulation Language (DML) commands and Data Definition 
	Language (DDL) commands. Data Manipulation Language (DML) 
	commands retrieve or manipulate data. Data Definition 
	Language (DDL) commands create or change tables. 